#!/bin/sh

# Prepare a set of disks for installation or backup restore.
#
# This script shouldn't exist. Instead we should use d-i or FAI or
# some other standard installer. Unfortunately, they are all quite
# difficult to deploy and we don't have enough control over our
# infrastructure to do this ourselves.
#
# It should also be merged with tor-install-hetzner but is currently
# separate because the latter is only for virtual machines.
#
# This script was used to initialize the archive.tpo replacement as
# part of Trac ticket #29697.
#
# Copyright 2019 Antoine Beaupr√© <anarcat@torproject.org>
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful, but
#   WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#   General Public License for more details.
#
#   You probably already have access to a copy of the GNU General Public
#   License or you can find one on the Internet; if not, write to the
#   copyright holder or to the Free Software Foundation, Inc., 59 Temple
#   Place, Suite 330, Boston, MA 02111-1307 USA.

set -e
set -u

echo "WARNING: this script is deprecated. write a new setup-storage config instead."

printf "press enter to continue..."
read _

disks=/dev/sd[abcd]
boot_parts=/dev/sd[abcd]2
boot_raid_level=10
hdd_parts=/dev/sd[abcd]3
# ssd_parts=...
hdd_raid_level=10
hostname=${HOSTNAME:-$(hostname)}
# pvnames shouldn't have dashes
hdd_pvname=$(echo ${hostname} | sed 's/-//g')hdd
hdd_vgname=vg_$hdd_pvname
# denote the crypted device
hdd_pvname=c$hdd_pvname
root_size=30G
swap_size=1G
luks_passphrase=${LUKS_PASSPHRASE:-$(tr -dc 'A-Za-z0-9' < /dev/urandom | head -c 30)}

cat <<EOF
Configuration:
disks=$disks
boot_parts=$boot_parts
boot_raid_level=$boot_raid_level
hdd_parts=$hdd_parts
hdd_raid_level=$hdd_raid_level
hdd_vgname=$hdd_vgname
hdd_pvname=$hdd_pvname
root_size=$root_size
swap_size=$swap_size
luks_passphrase=$luks_passphrase
EOF
printf "about to overwrite $disks, go ahead? [y/N] "
read ans
if [ "$ans" != "y" ]; then
    echo "Exiting."
    exit 1
fi

for disk in $disks; do
    if parted --machine $disk print | grep -q :primary: ; then
        echo "W: $disk is already partitioned: primary partition detected"
    else
        echo "I: partitionning disk $disk..."
        parted --align optimal $disk <<EOF
mklabel gpt
mkpart primary 0% 8MB
set 1 bios_grub on
mkpart primary 8MB 508MB
mkpart primary 508MB 100%
EOF
        # mark partitions as "Linux RAID" (id 29)
        sfdisk --part-type $disk 2 29
    fi
done
boot_array=/dev/md0
hdd_array=/dev/md1
if [ -b $boot_array ]; then
    echo "W: $boot_parts already configured ($boot_array exists), skipping"
else
    echo "I: creating /boot RAID-$boot_raid_level array with $boot_parts"
    mdadm --create --verbose $boot_array --level=$boot_raid_level --raid-devices=$(echo $boot_parts | wc -w) $boot_parts
    echo "I: formatting /boot ($boot_array)"
    mkfs $boot_array
fi
if [ -b $hdd_array ]; then
    echo "W: $hdd_parts already configured ($hdd_array exists), skipping"
else
    echo "I: creating main RAID-$hdd_raid_level array with $hdd_parts"
    mdadm --create --verbose $hdd_array --level=$hdd_raid_level --raid-devices=$(echo $hdd_parts | wc -w) $hdd_parts
    echo "I: formatting $hdd_array as LUKS partition"
    echo -n "$luks_passphrase" | cryptsetup luksFormat $hdd_array --key-file=-
fi
if [ -b /dev/mapper/$hdd_pvname ]; then
    echo "W: /dev/mapper/$hdd_pvname already present"
else
    echo "I: unlocking $hdd_array"
    echo -n "$luks_passphrase" | cryptsetup luksOpen $hdd_array "$hdd_pvname" --key-file=-
    echo "I: creating physical and volume group $hdd_pvname"
    pvcreate "/dev/mapper/$hdd_pvname"
    vgcreate $hdd_vgname /dev/mapper/$hdd_pvname
    echo "I: creating $root_size root partition"
    lvcreate -L$root_size -n root $hdd_vgname
    mkfs /dev/$hdd_vgname/root
    echo "I: creating $swap_size swap partition"
    lvcreate -L$swap_size -n swap $hdd_vgname
    mkswap /dev/$hdd_vgname/swap
    echo "I: mounting everything"
    mount /dev/$hdd_vgname/root /mnt/
    mkdir /mnt/boot
    mount $hdd_array /mnt/boot
fi
echo "I: all done"
lsblk
vgdisplay -C
lvdisplay -C
df -h /mnt /mnt/boot

cat <<EOF
TODO: include the tmpfs and swap in the above config. For now, try:

grep -q tmpfs /etc/fstab || echo 'tmpfs /tmp tmpfs defaults 0 0' >> /etc/fstab

! grep -q swap /etc/fstab && \
dd if=/dev/zero bs=1024k count=1024 of=/swapfile && \
chmod 0 /swapfile && \
mkswap /swapfile && \
echo '/swapfile none swap sw 0 0' >> /etc/fstab && \
swapon -a
EOF
