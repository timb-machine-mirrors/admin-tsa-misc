#!/usr/bin/python3
# coding: utf-8

''''''

# Copyright (C) 2016 Antoine Beaupr√© <anarcat@debian.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from __future__ import division, absolute_import
from __future__ import print_function, unicode_literals

import sys

import hashlib

from paramiko import MissingHostKeyPolicy, SSHException
from invoke import Argument, Collection
from fabric import Connection

from fabric_tpa import host
from fabric_tpa import VerboseProgram

from binascii import hexlify as stdlib_hexlify
if sys.version_info >= (3, 8):
    hexlify = stdlib_hexlify
else:
    def hexlify(data, sep, bytes_per_sep=1):
        """
        replacement for python 3.8's hexlify, which now nicely takes a separator

        data and sep are bytes, and it returns bytes
        """
        s = stdlib_hexlify(data)
        return sep.join(s[i:i+bytes_per_sep] for i in range(0, len(s), bytes_per_sep))


class MatchingHostKeyPolicy(MissingHostKeyPolicy):
    fingerprints_md5_colons = []

    def missing_host_key(self, client, hostname, key):
        hash = hexlify(hashlib.md5(key.asbytes()).digest(), b':', 2).decode('ascii')
        if hash not in self.fingerprints_md5_colons:
            raise SSHException(
                "Server {!r} key {} not in trusted fingerprints: {!r}".format(
                    hostname,
                    hash,
                    self.fingerprints_md5_colons
                )
            )


class CustomFingerprintProgram(VerboseProgram):
    def core_args(self):
        core_args = super().core_args()
        extra_args = [
            Argument(
                names=('fingerprint',),
                kind=list,
                default=False,
                help="expected server fingerprint"
            ),
        ]
        return core_args + extra_args

    def parse_core(self, argv):
        super().parse_core(argv)
        MatchingHostKeyPolicy.fingerprints_md5_colons = self.args.fingerprint.value
        Connection.default_host_key_policy = MatchingHostKeyPolicy


def main():
    col = Collection()
    col.add_task(host.install_hetzner_robot, name='hetzner-robot')
    col.add_task(host.fetch_ssh_host_pubkey)
    program = CustomFingerprintProgram(namespace=col)
    program.run()


if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        import traceback
        import pdb
        import sys
        traceback.print_exc()
        pdb.post_mortem()
        sys.exit(1)
        raise e
