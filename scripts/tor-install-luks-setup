#!/bin/sh

# Configure LUKS initrd unlocking procedures
#
# Copyright 2019 Antoine Beaupr√© <anarcat@torproject.org>
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful, but
#   WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#   General Public License for more details.
#
#   You probably already have access to a copy of the GNU General Public
#   License or you can find one on the Internet; if not, write to the
#   copyright holder or to the Free Software Foundation, Inc., 59 Temple
#   Place, Suite 330, Boston, MA 02111-1307 USA.

set -u
set -e

# mountpoint from grml or first argument or current directory
MNTPOINT=${MNTPOINT:-${1:-.}}
AUTHKEYS_SOURCE=${AUTHKEYS_SOURCE:-$HOME/.ssh/authorized_keys}
# set to 1 to enable, 0 to disable hetzner network hack, leave empty for auto-detect
USE_HETZNER_NETWORK_HACK=""

if [ -z "$USE_HETZNER_NETWORK_HACK" ] ; then
    # XXX: circumstancial evidence tells us that the network hack is
    # required on hosts with that RFC1918 IP space gateway, it might
    # not be complete
    if ip route show | grep -q 172.31.1.1; then
        USE_HETZNER_NETWORK_HACK=1
    else
        USE_HETZNER_NETWORK_HACK=0
    fi
fi

echo "I: setting up LUKS boot on $MNTPOINT..."

VGNAME=$(lvs --noheadings -o vg_name $(findmnt -o SOURCE -l -n $MNTPOINT) | sed 's/^ *//')
PVDEV=$(pvs --separator : --noheadings -o vg_name,pv_name | sed -e 's/^[[:space:]]*//' | awk -F: -v VG="$VGNAME" ' {print $2}')
UUID=$(blkid -s UUID -o value $(cryptsetup status $PVDEV | sed -n '/device:/{s/.*: *//;p}'))
PVNAME=$(basename "$PVDEV")

echo "I: UUID: $UUID, VG: $VGNAME PV: $PVDEV"

if ! [ -f $AUTHKEYS_SOURCE ] || ! [ -s $AUTHKEYS_SOURCE ]; then
    echo "$AUTHKEYS_SOURCE missing or empty" >&2
    AUTHKEYS_SOURCE=$(mktemp)
    printf "enter valid SSH authorized keys string followed by control-d: "
    cat > $AUTHKEYS_SOURCE
fi

echo "I: bind mounting everything"
for fs in dev proc run sys  ; do
    mount -o bind /$fs "$MNTPOINT/$fs"
done

echo "I: installing packages..."
DEBIAN_FRONTEND=noninteractive chroot "$MNTPOINT" apt-get install -y dropbear-initramfs cryptsetup console-setup

echo "I: adding SSH keys from $AUTHKEYS_SOURCE"
sed -e '/^ssh-/ s#^#no-port-forwarding,no-agent-forwarding,no-X11-forwarding,command="/bin/cryptroot-unlock" #' "$AUTHKEYS_SOURCE" > "$MNTPOINT/etc/dropbear-initramfs/authorized_keys"


echo "I: setting up network hook in initramfs"

mkdir -p $MNTPOINT/etc/default/grub.d
echo 'GRUB_CMDLINE_LINUX="$GRUB_CMDLINE_LINUX net.ifnames=0"' > $MNTPOINT/etc/default/grub.d/local-ifnames.cfg

if [ "$USE_HETZNER_NETWORK_HACK" -gt 0 ]; then
    # this is necessary because, apparently, the kernel's DHCP client
    # cannot deal with the weird Hetzner routing setup, which looks
    # something like this:
    #
    # $ ip r
    # default via 172.31.1.1 dev eth0 
    # 172.31.1.1 dev eth0 scope link
    # $ ip a
    # [...]
    # 2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq state UP group default qlen 1000
    # [...]
    # inet 95.216.141.241/32 brd 95.216.141.241 scope global eth0
    cat > "$MNTPOINT/etc/initramfs-tools/scripts/init-premount/local-hetzner-default-gw" << 'EOF'
#!/bin/sh

PREREQ=""
prereqs() {
  echo "$PREREQ"
}

case $1 in
  prereqs)
    prereqs
    exit 0
    ;;
esac

. /scripts/functions

configure_networking

log_begin_msg "Checking if we find the initramfs config and network info."
if [ -e /conf/initramfs.conf ]; then
  . /conf/initramfs.conf
fi
if [ -z "$DEVICE" ]; then
  log_begin_msg "No networking device set."
  exit
fi

if [ -e /run/net-$DEVICE.conf ]; then
  log_begin_msg "No /run/net-$DEVICE.conf found."
  . /run/net-$DEVICE.conf
fi

if [ -z "$IPV4GATEWAY" ]; then
  log_begin_msg "No ipv4 gateway info found."
  exit
fi

log_begin_msg "Adding a host route to the ipv4 gateway $IPV4GATEWAY on $DEVICE"
ip route add "$IPV4GATEWAY"/32 dev "$DEVICE"
log_begin_msg "Setting default route"
ip route add default via "$IPV4GATEWAY" dev "$DEVICE"
EOF
    chmod +x "$MNTPOINT/etc/initramfs-tools/scripts/init-premount/local-hetzner-default-gw"

    echo "I: setting DEVICE=eth0 in initramfs.conf"
    sed -i -e 's/^DEVICE=$/DEVICE=eth0/' "$MNTPOINT/etc/initramfs-tools/initramfs.conf"
fi

echo "I: configuring crypttab"
cat > "$MNTPOINT/etc/crypttab" << EOF
$PVNAME UUID=$UUID none luks
EOF

echo "I: regenerating initramfs"
chroot $MNTPOINT update-initramfs -u -k all
echo "I: updating grub"
chroot $MNTPOINT update-grub
echo "I: unmounting"
for fs in dev proc run sys ; do
    umount "$MNTPOINT/$fs"
done
